# Name of the workflow - This will be displayed in the GitHub Actions tab
name: CICD Pipeline ML Springboot Microservice App
# Define when this workflow will run
on:
  push:
    branches: [ "master" ]  # Triggers when code is pushed to master branch
  pull_request:
    branches: [ "master" ]  # Triggers when a PR is created against master branch
# Define the jobs that will run as part of this workflow
jobs:
  # The build job handles both building and deploying the application
  build:
    # Specifies the type of runner that the job will run on
    runs-on: ubuntu-latest
    
    # Permissions needed for the job
    permissions:
      contents: write        # Allows the job to write to repository contents
      security-events: write # Allows the job to write security events
      
    # Sequential steps that make up the job
    steps:
    # Step 1: Check out your repository code
    - uses: actions/checkout@v4
    
    # Step 2: Set up Java environment
    - name: Set up JDK 17
      uses: actions/setup-java@v4  # Official GitHub Action for setting up Java
      with:
        java-version: '17'         # Java version to use
        distribution: 'temurin'    # Distribution of Java to use (Eclipse Temurin)
        cache: maven               # Caches Maven dependencies to speed up builds
    
    # Step 3: Build your application with Maven
    - name: Build with Maven
      run: mvn clean install       # Cleans the project and installs dependencies
    
    # Step 4: Authenticate with Docker Hub
    - name: Login to Docker Hub
      uses: docker/login-action@v2 # Official GitHub Action for Docker login
      with:
        # Use secrets stored in your GitHub repository
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    
    # Step 5: Build and push Docker image
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/ml-springboot-app:latest
    
    # Step 6: Setup SSH for deployment to EC2
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}
        
    # Step 7: Deploy Docker image to EC2
    - name: Deploy Docker image to EC2
      run: |
        ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
          # Stop existing container
          docker stop spring-app || true
          docker rm spring-app || true
          
          # Pull latest image
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/ml-springboot-app:latest
          
          # Run container
          docker run -d --name spring-app -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/ml-springboot-app:latest
        EOF